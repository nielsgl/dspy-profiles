name: "Release: Publish on Tag + Docs"

on:
  # Manual or local tags still work
  push:
    tags:
      - "*"
  # Auto-tag workflow uses GITHUB_TOKEN; chain via workflow_run
  workflow_run:
    workflows: ["Release: Auto-bump & Tag on main"]
    types: [completed]

permissions:
  contents: write
  id-token: write

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  publish:
    name: "ðŸ“¦ Publish to PyPI"
    # Skip bootstrap tag; if workflow_run, require success
    if: >-
      (github.event_name == 'push' && github.ref_name != '0.0.0') ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: "Resolve tag to publish"
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG='${{ github.ref_name }}'
          else
            # Latest tag by create date
            TAG=$(git for-each-ref --sort=-creatordate --format='%(refname:strip=2)' refs/tags | head -n 1)
          fi
          if [[ -z "$TAG" || "$TAG" == "0.0.0" ]]; then
            echo "No valid tag resolved; exiting." >&2
            exit 1
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: "Checkout tag"
        shell: bash
        run: |
          set -euo pipefail
          git checkout "tags/${{ steps.tag.outputs.tag }}"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: "Install uv and enable caching"
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: "Build package"
        run: uv build --sdist --wheel

      - name: "Publish to PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        # with:
        #   attestations: true

      - name: "Create GitHub Release"
        env:
          GH_TOKEN: ${{ github.token }}
          TAG: ${{ steps.tag.outputs.tag }}
        run: |
          gh release create "$TAG" \
            --repo "$GITHUB_REPOSITORY" \
            --title "$TAG" \
            --generate-notes || echo "Release may already exist; continuing."

  docs:
    name: "ðŸ“š Deploy Docs"
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: "Checkout tag"
        shell: bash
        run: |
          set -euo pipefail
          git checkout "tags/${{ needs.publish.outputs.tag || '' }}" 2>/dev/null || true
          # Fallback: resolve latest again if not exported
          if ! git rev-parse -q --verify HEAD >/dev/null; then
            TAG=$(git for-each-ref --sort=-creatordate --format='%(refname:strip=2)' refs/tags | head -n 1)
            git checkout "tags/${TAG}"
          fi

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: "Install uv and enable caching"
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: "Install dependencies"
        run: uv sync --all-extras --dev

      - name: "Build and deploy documentation"
        run: uv run mkdocs gh-deploy --force
