{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to dspy-profiles","text":"<p>A companion tool for the DSPy framework to manage configuration profiles, inspired by the AWS CLI.</p> <p><code>dspy-profiles</code> allows you to define, switch between, and manage different DSPy configurations for various environments (e.g., development, staging, production) without cluttering your code.</p> <p>The Problem</p> <p>When working with DSPy, you often need to switch between different language models, retrieval models, and settings. For example:</p> <ul> <li>Using a cheap, fast model like <code>gpt-4o-mini</code> in development.</li> <li>Using a powerful model like <code>claude-3-opus</code> in production.</li> <li>Pointing to a staging database for your retrieval model.</li> <li>Toggling settings like <code>track_usage</code>.</li> </ul> <p>Managing this configuration directly in your code can be messy, error-prone, and insecure.</p> <p>The Solution</p> <p><code>dspy-profiles</code> moves this configuration out of your code and into a simple, centralized <code>profiles.toml</code> file. It provides a powerful CLI and a clean Python API to manage and use these profiles seamlessly.</p>"},{"location":"#configuration-hierarchy","title":"Configuration Hierarchy","text":"<p><code>dspy-profiles</code> locates your configuration file with a clear, <code>git</code>-like precedence:</p> <ol> <li>Project-Specific File: It searches for a <code>profiles.toml</code> in the current directory and its parent directories. This allows you to commit project-specific profiles directly to your repository.</li> <li>Environment Variable: You can set the <code>DSPY_PROFILES_PATH</code> environment variable to point to a specific configuration file.</li> <li>Global File: If neither of the above is found, it falls back to the global default at <code>~/.dspy/profiles.toml</code>.</li> </ol>"},{"location":"#key-features","title":"Key Features","text":"<p><code>dspy-profiles</code> is designed to be a comprehensive solution for DSPy configuration management.</p> Declarative ProfilesPowerful CLISeamless Python APIAdvanced Features <p>Define all your environment settings in a clear, human-readable TOML file.</p> ~/.dspy/profiles.toml<pre><code>[dev.lm]\nmodel = \"openai/gpt-4o-mini\"\ntemperature = 0.7\n\n[dev.settings]\ncache_dir = \".cache\"\n\n[prod]\nextends = \"dev\"\n\n[prod.lm]\nmodel = \"anthropic/claude-3-opus\"\ntemperature = 0.0\n</code></pre> <p>A rich command-line interface lets you manage your profiles without ever leaving the terminal.</p> <ul> <li><code>dspy-profiles init</code>: Interactively create a new profile.</li> <li><code>dspy-profiles list</code>: See all your available profiles.</li> <li><code>dspy-profiles show &lt;name&gt;</code>: View the full configuration of a profile.</li> <li><code>dspy-profiles diff &lt;a a&gt; &lt;b b&gt;</code>: Compare two profiles.</li> <li><code>dspy-run ...</code>: The star of the show. Execute any script with a profile, no code changes needed.</li> </ul> <p>Keep your DSPy code completely clean of configuration. Use <code>dspy-run</code> to activate profiles from the command line, or use the elegant context manager for fine-grained control.</p> <pre><code># Your script remains pure DSPy, with no mention of profiles.\n# my_script.py\nimport dspy\n\npredictor = dspy.Predict(\"question -&gt; answer\")\nresult = predictor(question=\"What is the capital of Spain?\")\nprint(f\"The capital of Spain is {result.answer}.\")\n</code></pre> <pre><code># Activate the profile from the outside!\n$ dspy-run --profile production my_script.py\n</code></pre> <ul> <li>Profile Inheritance: Create base profiles and extend them for different environments.</li> <li>Environment Precedence: A clear and predictable activation logic ensures the right profile is always used.</li> <li>Validation: <code>dspy-profiles validate</code> checks your configuration file for correctness.</li> <li>Connectivity Testing: <code>dspy-profiles test &lt;name&gt;</code> ensures your settings are correct and your models are reachable.</li> </ul>"},{"location":"#get-started","title":"Get Started","text":"<p>Ready to streamline your DSPy workflow?</p> <p>Get Started with the Quickstart Guide</p>"},{"location":"advanced-usage/","title":"Advanced Usage","text":"<p>This section covers more advanced features and use cases for <code>dspy-profiles</code>.</p>"},{"location":"advanced-usage/#complex-profile-examples","title":"Complex Profile Examples","text":"<p>While the <code>init</code> command is great for getting started, your <code>profiles.toml</code> file can grow to handle much more complex scenarios.</p>"},{"location":"advanced-usage/#configuring-different-lms","title":"Configuring Different LMs","text":"<p>You can configure any language model that DSPy supports. Here's an example of configuring a local Ollama model:</p> ~/.dspy/profiles.toml<pre><code>[local_mistral]\n[local_mistral.lm]\nmodel = \"ollama_chat/llama3.2\"\napi_base = \"http://localhost:11434\"\nmax_tokens = 4096\n</code></pre>"},{"location":"advanced-usage/#configuring-retrieval-models","title":"Configuring Retrieval Models","text":"<p>Configuring a retrieval model like <code>ColBERTv2</code> is just as easy. This is where profiles become incredibly powerful, as you can switch your entire retrieval backend with a single word.</p> ~/.dspy/profiles.toml<pre><code>[dev_retrieval]\n[dev_retrieval.rm]\nclass_name = \"dspy.ColBERTv2\"\nurl = \"http://localhost:8893/api/search\"\n</code></pre>"},{"location":"advanced-usage/#understanding-toml-syntax-two-ways-to-write-your-profiles","title":"Understanding TOML Syntax: Two Ways to Write Your Profiles","text":"<p>When you look at TOML files, you might notice that people structure their data in a couple of different ways, especially when it comes to nested information. <code>dspy-profiles</code> is designed to be flexible and understands both common styles right out of the box. Let's break them down.</p>"},{"location":"advanced-usage/#style-1-nested-table-syntax-the-explicit-way","title":"Style 1: Nested Table Syntax (The Explicit Way)","text":"<p>This is the most structured way to write your configuration. You can think of it like creating folders and subfolders. For example, to define the <code>lm</code> (language model) settings for a profile named <code>my_profile</code>, you would create a \"folder\" called <code>my_profile.lm</code>.</p> <p>This is great for clarity, especially when you have multiple sections in your profile (like <code>lm</code>, <code>rm</code>, and <code>settings</code>).</p> Nested Table Syntax<pre><code># This creates a 'my_profile' profile with an 'lm' section inside it.\n[my_profile.lm]\nmodel = \"gpt-4o-mini\"\ntemperature = 0.7\n\n# You could also add a retrieval model like this:\n[my_profile.rm]\nmodel = \"colbertv2.0\"\n</code></pre>"},{"location":"advanced-usage/#style-2-dotted-key-syntax-the-shortcut","title":"Style 2: Dotted Key Syntax (The Shortcut)","text":"<p>This style is more concise and is often used for simpler configurations. Instead of creating explicit \"subfolders,\" you use a dot (<code>.</code>) in the key to indicate nesting. You can think of it as a shortcut path to a file.</p> <p><code>dspy-profiles</code> will automatically understand that <code>lm.model</code> means \"the <code>model</code> key inside the <code>lm</code> section.\"</p> Dotted Key Syntax<pre><code># This creates a 'my_profile' profile and sets the 'model' and 'temperature'\n# keys inside an 'lm' section.\n[my_profile]\nlm.model = \"gpt-4o-mini\"\nlm.temperature = 0.7\nrm.model = \"colbertv2.0\"\n</code></pre> <p>Key Takeaway: Both of these styles produce the exact same result. You can use whichever one you find more readable, and you can even mix and match them in the same file.</p>"},{"location":"advanced-usage/#dry-and-maintainable-using-profile-inheritance","title":"Dry and Maintainable: Using Profile Inheritance","text":"<p>As your project grows, you might find yourself repeating the same settings across multiple profiles. For example, you might have a <code>dev</code>, <code>staging</code>, and <code>prod</code> profile that all use the same <code>api_key</code> and <code>api_base</code>, but have different <code>model</code>s.</p> <p>Instead of copying and pasting these settings, you can use the <code>extends</code> keyword to create a \"parent\" profile that other \"child\" profiles can inherit from. This is a powerful feature that helps keep your configuration DRY (Don't Repeat Yourself).</p>"},{"location":"advanced-usage/#how-it-works","title":"How It Works","text":"<ol> <li>Create a Base Profile: First, you create a base profile that contains all the common settings you want to share.</li> <li>Create a Child Profile: Then, you create a new profile and use the <code>extends</code> keyword to tell it which base profile to inherit from.</li> <li>Override as Needed: The child profile will automatically have all the settings from the base profile. You can then add new settings or override existing ones.</li> </ol>"},{"location":"advanced-usage/#example-a-common-use-case","title":"Example: A Common Use Case","text":"<p>Let's say you want to define a <code>base_prod</code> profile that has your production <code>api_key</code> and <code>api_base</code>. Then, you want to create two child profiles: <code>creative_prod</code> for tasks that need a high temperature, and <code>analytical_prod</code> for tasks that need a low temperature.</p> <p>Here's how you would do it:</p> profiles.toml<pre><code># 1. The Base Profile\n# This contains the common settings that both child profiles will use.\n[base_prod.lm]\nmodel = \"azure/gpt-4o\"\napi_key = \"your_production_api_key\"  # It's better to use env variables for this!\napi_base = \"your_production_api_base\"\n\n# 2. The Creative Child Profile\n# This profile inherits from 'base_prod' and only changes the temperature.\n[creative_prod]\nextends = \"base_prod\"\n\n[creative_prod.lm]\ntemperature = 0.9\n\n# 3. The Analytical Child Profile\n# This profile also inherits from 'base_prod' but sets a different temperature.\n[analytical_prod]\nextends = \"base_prod\"\n\n[analytical_prod.lm]\ntemperature = 0.0\n</code></pre> <p>Now, when you activate the <code>creative_prod</code> profile, it will have the <code>model</code>, <code>api_key</code>, and <code>api_base</code> from <code>base_prod</code>, but with its own <code>temperature</code> of <code>0.9</code>. This makes your configuration much cleaner and easier to update in the future.</p>"},{"location":"advanced-usage/#activation-precedence","title":"Activation Precedence","text":"<p><code>dspy-profiles</code> uses a clear and predictable order of precedence to determine which profile is active. This ensures that you always know which configuration is being used.</p> <p>The order is as follows:</p> <ol> <li><code>profile()</code> Context Manager / <code>@with_profile</code> Decorator: The most specific and highest precedence.</li> <li><code>DSPY_PROFILE</code> Environment Variable: If set, this profile will be used. This is what the <code>dspy-run</code> command uses internally.</li> <li>Default DSPy Configuration: If neither of the above is present, the standard DSPy environment variables (<code>OPENAI_API_KEY</code>, etc.) or manually configured settings will be used.</li> </ol> <pre><code>graph TD\n    subgraph \"Activation Logic\"\n        A{Code Execution} --&gt; B{Is it inside a profile block?};\n        B -- Yes --&gt; C[Activate Profile from Context];\n        B -- No --&gt; D{Is `DSPY_PROFILE` env var set?};\n        D -- Yes --&gt; E[Activate Profile from Env Var];\n        D -- No --&gt; F[Use Default DSPy Settings];\n    end\n</code></pre>"},{"location":"advanced-usage/#programmatic-access","title":"Programmatic Access","text":"<p>You can programmatically access profile information, which is useful for introspection or for building more complex workflows.</p>"},{"location":"advanced-usage/#getting-the-current-profile","title":"Getting the Current Profile","text":"<p>The <code>current_profile()</code> function returns the name of the currently active profile, if any.</p> <pre><code>from dspy_profiles import profile, current_profile\n\nprint(f\"Outside context: {current_profile()}\")\n\nwith profile(\"my_profile\"):\n    print(f\"Inside context: {current_profile()}\")\n\n# Output:\n# Outside context: None\n# Inside context: my_profile\n</code></pre>"},{"location":"advanced-usage/#loading-a-profiles-configuration","title":"Loading a Profile's Configuration","text":"<p>The <code>get_profile()</code> function allows you to load the fully resolved configuration of any profile as a dictionary.</p> <pre><code>from dspy_profiles import get_profile\n\nconfig = get_profile(\"my_profile\")\nprint(config)\n\n# Output:\n# {'lm': {'model': 'gpt-4o-mini'}, 'settings': {'temperature': 0.7}}\n</code></pre>"},{"location":"advanced-usage/#importing-from-env-files","title":"Importing from .env Files","text":"<p>The <code>dspy-profiles import</code> command allows you to create a new profile directly from a <code>.env</code> file. This is particularly useful for migrating existing DSPy projects or for teams that use <code>.env</code> files for environment management.</p> <p>The command works by reading a <code>.env</code> file and looking for variables with the <code>DSPY_</code> prefix. It then converts these variables into a profile, following a simple mapping logic:</p> <ul> <li><code>DSPY_LM_MODEL</code> becomes <code>[profile.lm] model = \"...\"</code></li> <li><code>DSPY_RM_URL</code> becomes <code>[profile.rm] url = \"...\"</code></li> <li><code>DSPY_SETTINGS_CACHE_DIR</code> becomes <code>[profile.settings] cache_dir = \"...\"</code></li> </ul>"},{"location":"advanced-usage/#example","title":"Example","text":"<p>Imagine you have a <code>.env</code> file with the following content:</p> .env<pre><code># Language Model Settings\nDSPY_LM_MODEL=\"openai/gpt-4o-mini\"\nDSPY_LM_API_KEY=\"sk-...\"\nDSPY_LM_API_BASE=\"https://api.openai.com/v1\"\n\n# Retrieval Model Settings\nDSPY_RM_CLASS_NAME=\"dspy.ColBERTv2\"\nDSPY_RM_URL=\"http://localhost:8893/api/search\"\n\n# Other DSPy Settings\nDSPY_SETTINGS_TEMPERATURE=\"0.7\"\n</code></pre> <p>You can import this into a new profile named <code>from_env</code> with the following command:</p> <pre><code>dspy-profiles import --profile from_env --from .env\n</code></pre> <p>This will create a new <code>from_env</code> profile in your <code>profiles.toml</code> file. If your <code>profiles.toml</code> was empty, it would now look like this:</p> profiles.toml<pre><code>[from_env]\n\n[from_env.lm]\nmodel = \"openai/gpt-4o-mini\"\napi_key = \"sk-...\"\napi_base = \"https://api.openai.com/v1\"\n\n[from_env.rm]\nclass_name = \"dspy.ColBERTv2\"\nurl = \"http://localhost:8893/api/search\"\n\n[from_env.settings]\ntemperature = \"0.7\"\n</code></pre> <p>You can then view the new profile with <code>dspy-profiles show from_env</code>.</p>"},{"location":"advanced-usage/#seamless-integration-with-dspymodule","title":"Seamless Integration with <code>dspy.Module</code>","text":"<p>A key goal of <code>dspy-profiles</code> is to integrate seamlessly with the core patterns of <code>dspy</code>, especially the stateful <code>dspy.Module</code>. This section details the robust support for configuring modules declaratively and dynamically.</p>"},{"location":"advanced-usage/#the-challenge-configuration-at-the-right-time","title":"The Challenge: Configuration at the Right Time","text":"<p>As we've discussed, <code>dspy</code> modules like <code>dspy.Predict</code> are instantiated within your custom module's <code>__init__</code> method. However, they resolve their language model configuration from <code>dspy.settings</code> at runtime, when they are actually called.</p> <p>This means that to correctly configure a <code>dspy.Module</code>, the profile must be active when its <code>__call__</code> (or <code>forward</code>) method is executed. <code>dspy-profiles</code> provides an intelligent decorator that handles this automatically.</p>"},{"location":"advanced-usage/#the-solution-the-with_profile-decorator","title":"The Solution: The <code>@with_profile</code> Decorator","text":"<p>The <code>@with_profile</code> decorator is the recommended way to manage configuration for both simple functions and complex <code>dspy.Module</code> classes. It's smart enough to apply the correct behavior based on what it's decorating.</p> <ul> <li>On a function: It wraps the entire function call in a profile context.</li> <li>On a <code>dspy.Module</code> class: It wraps the module's <code>__call__</code> method, ensuring that every time you execute an instance of the module, the correct profile is active.</li> </ul>"},{"location":"advanced-usage/#complex-example-the-adaptive-reasoning-agent","title":"Complex Example: The Adaptive Reasoning Agent","text":"<p>This example demonstrates the full power of the decorator for setting a default context, and the <code>profile()</code> context manager for dynamic, conditional overrides.</p> <p>First, let's assume a <code>profiles.toml</code> with a cheap default model and an expensive expert model:</p> ~/.dspy/profiles.toml<pre><code># Profile for fast, low-cost queries\n[default.lm]\nmodel = \"azure/gpt-4o-mini\"\ntemperature = 0.7\n\n# Profile for complex, high-quality reasoning\n[expert_reasoner.lm]\nmodel = \"anthropic/claude-3-opus-20240229\"\ntemperature = 0.0\n</code></pre> <p>Now, we can build our <code>AdaptiveAgent</code>:</p> <pre><code>import dspy\nfrom dspy_profiles import profile, with_profile\n\n# The class decorator sets the default execution context for all calls to this module.\n@with_profile(\"default\")\nclass AdaptiveAgent(dspy.Module):\ndef __init__(self):\n    super().__init__()\n    # This signature asks the model to rate its own confidence.\n    self.initial_attempt = dspy.ChainOfThought(\"question -&gt; answer, confidence_score: int\")\n    self.expert_attempt = dspy.ChainOfThought(\"question -&gt; answer\")\n\ndef forward(self, question):\n    # This call will use the \"default\" profile (gpt-4o-mini).\n    print(\"--- Attempting with default model... ---\")\n    first_pass = self.initial_attempt(question=question)\n\n    # If confidence is low, we escalate.\n    if first_pass.confidence_score &lt; 7:\n        print(\"\\\\n--- Low confidence. Escalating to expert model... ---\")\n\n        # Use the context manager to temporarily switch to the expert profile.\n        with profile(\"expert_reasoner\"):\n            expert_result = self.expert_attempt(question=question)\n            return dspy.Prediction(answer=expert_result.answer, escalated=True)\n\n    return dspy.Prediction(answer=first_pass.answer, escalated=False)\n\n# --- Execution ---\nagent = AdaptiveAgent()\nresult = agent(question=\"Explain the significance of the Treaty of Westphalia.\")\nprint(f\"Final Answer: {result.answer}\")\n</code></pre> <p>This pattern is incredibly powerful. The agent's default behavior is cleanly declared, while the critical, high-stakes logic for escalation is made explicit and readable with the context manager. This is the kind of robust, maintainable code that <code>dspy-profiles</code> is designed to enable.</p>"},{"location":"advanced-usage/#integrating-with-any-language-model","title":"Integrating with Any Language Model","text":"<p><code>dspy-profiles</code> is designed to work seamlessly with any language model that <code>dspy</code> supports. This is achieved through <code>dspy</code>'s unified <code>dspy.LM</code> class, which can be configured to connect to a wide variety of providers, including local models.</p>"},{"location":"advanced-usage/#the-model-string-more-than-just-a-name","title":"The <code>model</code> String: More Than Just a Name","text":"<p>The key to this integration is the <code>model</code> string in your profile's <code>lm</code> section. <code>dspy</code> uses a special prefix in this string to determine which provider to connect to.</p> <p>For example: -   <code>openai/gpt-4o-mini</code>: Connects to the OpenAI API. -   <code>anthropic/claude-3-opus-20240229</code>: Connects to the Anthropic API. -   <code>ollama_chat/llama3.2</code>: Connects to a local Ollama server.</p> <p>This prefix-based system allows you to switch between providers just by changing a single string in your profile.</p>"},{"location":"advanced-usage/#example-configuring-a-local-ollama-model","title":"Example: Configuring a Local Ollama Model","text":"<p>Let's say you want to create a profile to use a local Llama 3.2 model running on an Ollama server. Here's how you would configure it in your <code>profiles.toml</code>:</p> ~/.dspy/profiles.toml<pre><code>[local_llama]\n[local_llama.lm]\n# The 'ollama_chat/' prefix tells dspy to connect to an Ollama server.\nmodel = \"ollama_chat/llama3.2\"\n\n# You also need to provide the api_base for your local server.\napi_base = \"http://localhost:11434\"\n</code></pre> <p>When you activate the <code>local_llama</code> profile, <code>dspy-profiles</code> will configure <code>dspy</code> to use your local model. This makes it incredibly easy to switch between local and remote models for development and testing.</p> <p>For a full list of supported providers and their prefixes, please refer to the official dspy documentation.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This section provides a detailed reference for the <code>dspy-profiles</code> Python API.</p>"},{"location":"api-reference/#dspy_profiles","title":"<code>dspy_profiles</code>","text":"<p>dspy-profiles package.</p>"},{"location":"api-reference/#dspy_profiles.current_profile","title":"<code>current_profile()</code>","text":"<p>Returns the currently active <code>dspy-profiles</code> profile.</p> <p>This utility function provides introspection to see the fully resolved settings of the profile that is currently active via the <code>profile</code> context manager or <code>@with_profile</code> decorator.</p> <p>Returns:</p> Type Description <code>ResolvedProfile | None</code> <p>ResolvedProfile | None: The active ResolvedProfile, or None if no profile is active.</p> Source code in <code>dspy_profiles/core.py</code> <pre><code>def current_profile() -&gt; ResolvedProfile | None:\n    \"\"\"Returns the currently active `dspy-profiles` profile.\n\n    This utility function provides introspection to see the fully resolved settings\n    of the profile that is currently active via the `profile` context manager\n    or `@with_profile` decorator.\n\n    Returns:\n        ResolvedProfile | None: The active ResolvedProfile, or None if no profile is active.\n    \"\"\"\n    return _CURRENT_PROFILE.get()\n</code></pre>"},{"location":"api-reference/#dspy_profiles.profile","title":"<code>profile(profile_name=None, *, force=False, config_path=None, **overrides)</code>","text":"<p>A context manager to temporarily apply a dspy-profiles configuration.</p> <p>This context manager activates a specified profile, configuring <code>dspy.settings</code> with the language model (LM), retrieval model (RM), and other settings defined in the profile. It also handles profile precedence and allows for inline overrides.</p> <p>Parameters:</p> Name Type Description Default <code>profile_name</code> <code>str | None</code> <p>The name of the profile to activate. If not provided, it falls back to the <code>DSPY_PROFILE</code> environment variable, and then to \"default\". Defaults to None.</p> <code>None</code> <code>force</code> <code>bool</code> <p>If True, this profile will override any profile set via the <code>DSPY_PROFILE</code> environment variable. Defaults to False.</p> <code>False</code> <code>config_path</code> <code>str | None</code> <p>Path to the <code>profiles.toml</code> file. If None, uses the default search paths. Defaults to None.</p> <code>None</code> <code>**overrides</code> <code>Any</code> <p>Keyword arguments to override profile settings (e.g., <code>lm</code>, <code>rm</code>). These are deeply merged into the loaded profile's configuration.</p> <code>{}</code> <p>Yields:</p> Name Type Description <code>None</code> <code>None</code> <p>The context manager does not yield a value.</p> Example <pre><code>with dspy_profiles.profile(\"my-profile\", lm={\"temperature\": 0.7}):\n    # DSPy calls within this block will use 'my-profile' with overridden temperature.\n    response = dspy.Predict(\"question -&gt; answer\")(\"What is DSPy?\")\n</code></pre> Source code in <code>dspy_profiles/core.py</code> <pre><code>@contextlib.contextmanager\ndef profile(\n    profile_name: str | None = None,\n    *,\n    force: bool = False,\n    config_path: str | None = None,\n    **overrides: Any,\n) -&gt; Generator[None, None, None]:\n    \"\"\"A context manager to temporarily apply a dspy-profiles configuration.\n\n    This context manager activates a specified profile, configuring `dspy.settings`\n    with the language model (LM), retrieval model (RM), and other settings defined\n    in the profile. It also handles profile precedence and allows for inline overrides.\n\n    Args:\n        profile_name (str | None, optional): The name of the profile to activate. If not\n            provided, it falls back to the `DSPY_PROFILE` environment variable, and then\n            to \"default\". Defaults to None.\n        force (bool, optional): If True, this profile will override any profile set via\n            the `DSPY_PROFILE` environment variable. Defaults to False.\n        config_path (str | None, optional): Path to the `profiles.toml` file. If None,\n            uses the default search paths. Defaults to None.\n        **overrides: Keyword arguments to override profile settings (e.g., `lm`, `rm`).\n            These are deeply merged into the loaded profile's configuration.\n\n    Yields:\n        None: The context manager does not yield a value.\n\n    Example:\n        ```python\n        with dspy_profiles.profile(\"my-profile\", lm={\"temperature\": 0.7}):\n            # DSPy calls within this block will use 'my-profile' with overridden temperature.\n            response = dspy.Predict(\"question -&gt; answer\")(\"What is DSPy?\")\n        ```\n    \"\"\"\n    env_profile = os.getenv(\"DSPY_PROFILE\")\n    profile_to_load = profile_name if force or not env_profile else env_profile or \"default\"\n\n    if not profile_to_load:\n        yield\n        return\n\n    loader = ProfileLoader(config_path=config_path) if config_path else ProfileLoader()\n    loaded_profile = loader.get_config(profile_to_load)\n    # print(f\"DEBUG: Loaded profile config: {loaded_profile.config}\")\n    print(f\"[DEBUG] Initial loaded_profile.config: {loaded_profile.config}\")\n    print(f\"[DEBUG] Overrides received: {overrides}\")\n    final_config = _deep_merge(loaded_profile.config, overrides)\n    print(f\"[DEBUG] final_config after merge: {final_config}\")\n    resolved_profile = ResolvedProfile(\n        name=loaded_profile.name,\n        config=final_config,\n        lm=final_config.get(\"lm\"),\n        rm=final_config.get(\"rm\"),\n        settings=final_config.get(\"settings\"),\n    )\n\n    # Profile-aware caching setup\n    settings = final_config.setdefault(\"settings\", {})\n    if \"cache_dir\" not in settings:\n        settings[\"cache_dir\"] = os.path.expanduser(f\"~/.dspy/cache/{loaded_profile.name}\")\n\n    lm_instance, rm_instance = None, None\n    if resolved_profile.lm:\n        print(f\"[DEBUG] resolved_profile.lm is type: {type(resolved_profile.lm)}\")\n        if isinstance(resolved_profile.lm, dspy.LM):\n            print(\"[DEBUG] resolved_profile.lm is a dspy.LM instance. Using it directly.\")\n            lm_instance = resolved_profile.lm\n        else:\n            print(\"[DEBUG] resolved_profile.lm is a dict. Instantiating new LM.\")\n            lm_config = resolved_profile.lm.copy()\n            model = lm_config.pop(\"model\", None)\n            provider = lm_config.pop(\"provider\", \"openai\").capitalize()\n            lm_class = getattr(dspy, provider, dspy.LM)\n            lm_instance = lm_class(model=model, **lm_config) if model else dspy.LM(**lm_config)\n        print(f\"[DEBUG] lm_instance created: {lm_instance}\")\n\n    if resolved_profile.rm:\n        rm_config = resolved_profile.rm.copy()\n        provider = rm_config.pop(\"provider\", \"ColBERTv2\")\n        # Fallback for legacy dspy versions might be needed if RM names change.\n        rm_class = getattr(dspy, provider, dspy.ColBERTv2)\n        rm_instance = rm_class(**rm_config)\n\n    token = _CURRENT_PROFILE.set(resolved_profile)\n    try:\n        # print(\n        #     f\"DEBUG: Configuring dspy.context with lm={lm_instance},\"\n        #     f\"rm={rm_instance}, settings={settings}\"\n        # )\n        dspy_settings = settings.copy()\n        if resolved_profile.lm and isinstance(resolved_profile.lm, dict):\n            dspy_settings.update(resolved_profile.lm)\n\n        dspy.settings.configure(**dspy_settings)\n\n        print(f\"[DEBUG] Entering dspy.context with lm_instance: {lm_instance}\")\n        with dspy.context(lm=lm_instance, rm=rm_instance, **settings):\n            yield\n    finally:\n        _CURRENT_PROFILE.reset(token)\n</code></pre>"},{"location":"api-reference/#dspy_profiles.with_profile","title":"<code>with_profile(profile_name, *, force=False, config_path=None, **overrides)</code>","text":"<p>A decorator to apply a dspy-profiles configuration to a function or dspy.Module.</p> <p>This decorator wraps a function or a <code>dspy.Module</code> class, activating the specified profile before the decorated object is called.</p> <p>When applied to a function, it wraps the function directly. When applied to a class (like a <code>dspy.Module</code>), it wraps the <code>__call__</code> method, ensuring the profile is active during its execution.</p> <p>Parameters:</p> Name Type Description Default <code>profile_name</code> <code>str</code> <p>The name of the profile to activate.</p> required <code>force</code> <code>bool</code> <p>If True, this profile will override any profile set via the <code>DSPY_PROFILE</code> environment variable. Defaults to False.</p> <code>False</code> <code>config_path</code> <code>str | None</code> <p>Path to the <code>profiles.toml</code> file. Defaults to None.</p> <code>None</code> <code>**overrides</code> <code>Any</code> <p>Keyword arguments to override profile settings.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Callable</code> <code>Callable</code> <p>The decorated function or class.</p> <p>Example (Function):     <pre><code>@dspy_profiles.with_profile(\"testing\", temperature=0)\ndef my_dspy_program(question):\n    return dspy.Predict(\"question -&gt; answer\")(question=question)\n</code></pre></p> <p>Example (dspy.Module):     <pre><code>@dspy_profiles.with_profile(\"agent-profile\")\nclass MyAgent(dspy.Module):\n    def __init__(self):\n        super().__init__()\n        self.predict = dspy.Predict(\"question -&gt; answer\")\n\n    def __call__(self, question):\n        return self.predict(question=question)\n</code></pre></p> Source code in <code>dspy_profiles/core.py</code> <pre><code>def with_profile(\n    profile_name: str, *, force: bool = False, config_path: str | None = None, **overrides: Any\n) -&gt; Callable:\n    \"\"\"A decorator to apply a dspy-profiles configuration to a function or dspy.Module.\n\n    This decorator wraps a function or a `dspy.Module` class, activating the\n    specified profile before the decorated object is called.\n\n    When applied to a function, it wraps the function directly. When applied to a\n    class (like a `dspy.Module`), it wraps the `__call__` method, ensuring the\n    profile is active during its execution.\n\n    Args:\n        profile_name (str): The name of the profile to activate.\n        force (bool, optional): If True, this profile will override any profile set via\n            the `DSPY_PROFILE` environment variable. Defaults to False.\n        config_path (str | None, optional): Path to the `profiles.toml` file.\n            Defaults to None.\n        **overrides: Keyword arguments to override profile settings.\n\n    Returns:\n        Callable: The decorated function or class.\n\n    Example (Function):\n        ```python\n        @dspy_profiles.with_profile(\"testing\", temperature=0)\n        def my_dspy_program(question):\n            return dspy.Predict(\"question -&gt; answer\")(question=question)\n        ```\n\n    Example (dspy.Module):\n        ```python\n        @dspy_profiles.with_profile(\"agent-profile\")\n        class MyAgent(dspy.Module):\n            def __init__(self):\n                super().__init__()\n                self.predict = dspy.Predict(\"question -&gt; answer\")\n\n            def __call__(self, question):\n                return self.predict(question=question)\n        ```\"\"\"\n\n    def decorator(target: Callable) -&gt; Callable:\n        # This is the wrapper that will be applied to the function or __call__ method.\n        def profile_wrapper(func_to_wrap: Callable) -&gt; Callable:\n            @wraps(func_to_wrap)\n            def wrapper(*args, **kwargs):\n                final_overrides = overrides.copy()\n                profile_keys = {\"lm\", \"rm\", \"settings\"}\n                func_overrides = {k: v for k, v in kwargs.items() if k in profile_keys}\n                func_args = {k: v for k, v in kwargs.items() if k not in profile_keys}\n\n                if func_overrides:\n                    final_overrides = _deep_merge(final_overrides, func_overrides)\n\n                with profile(profile_name, force=force, config_path=config_path, **final_overrides):\n                    return func_to_wrap(*args, **func_args)\n\n            return wrapper\n\n        # Check if the target is a class or a function/method\n        if inspect.isclass(target):\n            # It's a class, so we need to wrap its __call__ method.\n            original_call = target.__call__\n            target.__call__ = profile_wrapper(original_call)\n            return target\n        # It's a function, wrap it directly.\n        return profile_wrapper(target)\n\n    return decorator\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>New <code>dspy-run</code> command: A new, ergonomic <code>dspy-run</code> command has been added as the primary way to execute scripts with a profile. It is shorter, more intuitive, and intelligently prepends <code>python</code> to script files.</li> <li>The <code>dspy-run</code> command now defaults to the \"default\" profile if no profile is specified.</li> <li>Human-readable table output for the <code>show</code> command.</li> <li><code>--json</code> flag for both <code>list</code> and <code>show</code> commands for machine-readable output.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li><code>run</code> command: The <code>dspy-profiles run</code> command (and the new <code>dspy-run</code> command) now correctly activates the specified profile in the subprocess, fixing the \"No LM is loaded\" error.</li> <li>Data corruption bugs in <code>set</code> and <code>delete</code> commands.</li> <li><code>delete default</code> command no longer allows deleting the default profile.</li> <li><code>diff</code> command now correctly handles <code>HttpUrl</code> objects.</li> <li><code>list</code> and <code>show</code> commands now correctly handle <code>HttpUrl</code> objects when using the <code>--json</code> flag.</li> <li>Incorrect rendering of the quickstart button on the index page.</li> </ul>"},{"location":"cli-reference/","title":"CLI Reference","text":""},{"location":"cli-reference/#dspy-profiles","title":"dspy-profiles","text":"<p>A CLI for managing DSPy profiles.</p>"},{"location":"cli-reference/#usage","title":"Usage","text":"<p><code>dspy-profiles [OPTIONS] COMMAND [ARGS]...</code></p>"},{"location":"cli-reference/#arguments","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"cli-reference/#options","title":"Options","text":"Name Description Required Default <code>-v, --version</code> Show the version and exit. No - <code>--help</code> Show this message and exit. No -"},{"location":"cli-reference/#commands","title":"Commands","text":"Name Description <code>list</code> Lists all available profiles and their... <code>show</code> Shows the full configuration details of a... <code>delete</code> Deletes a specified profile. <code>set</code> Sets or updates a configuration value for... <code>init</code> Initializes a new profile interactively. <code>import</code> Imports a profile from a .env file. <code>diff</code> Compares two profiles and highlights their... <code>validate</code> Validates the structure and content of the... <code>test</code> Tests connectivity to the language model... <code>run</code> Executes a command with the specified..."},{"location":"cli-reference/#sub-commands","title":"Sub Commands","text":""},{"location":"cli-reference/#dspy-profiles-list","title":"<code>dspy-profiles list</code>","text":"<p>Lists all available profiles and their core details.</p>"},{"location":"cli-reference/#usage_1","title":"Usage","text":"<p><code>dspy-profiles list [OPTIONS]</code></p>"},{"location":"cli-reference/#arguments_1","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"cli-reference/#options_1","title":"Options","text":"Name Description Required Default <code>--json</code> Output the list of profiles in JSON format. No - <code>--help</code> Show this message and exit. No -"},{"location":"cli-reference/#dspy-profiles-show","title":"<code>dspy-profiles show</code>","text":"<p>Shows the full configuration details of a specific profile.</p>"},{"location":"cli-reference/#usage_2","title":"Usage","text":"<p><code>dspy-profiles show [OPTIONS] PROFILE_NAME</code></p>"},{"location":"cli-reference/#arguments_2","title":"Arguments","text":"Name Description Required <code>PROFILE_NAME</code> The name of the profile to display. Yes"},{"location":"cli-reference/#options_2","title":"Options","text":"Name Description Required Default <code>--json</code> Output the profile in JSON format. No - <code>--help</code> Show this message and exit. No -"},{"location":"cli-reference/#dspy-profiles-delete","title":"<code>dspy-profiles delete</code>","text":"<p>Deletes a specified profile.</p>"},{"location":"cli-reference/#usage_3","title":"Usage","text":"<p><code>dspy-profiles delete [OPTIONS] PROFILE_NAME</code></p>"},{"location":"cli-reference/#arguments_3","title":"Arguments","text":"Name Description Required <code>PROFILE_NAME</code> The name of the profile to delete. Yes"},{"location":"cli-reference/#options_3","title":"Options","text":"Name Description Required Default <code>-f, --force</code> Delete the profile without prompting for confirmation. No - <code>--help</code> Show this message and exit. No -"},{"location":"cli-reference/#dspy-profiles-set","title":"<code>dspy-profiles set</code>","text":"<p>Sets or updates a configuration value for a given profile.</p>"},{"location":"cli-reference/#usage_4","title":"Usage","text":"<p><code>dspy-profiles set [OPTIONS] PROFILE_NAME KEY VALUE</code></p>"},{"location":"cli-reference/#arguments_4","title":"Arguments","text":"Name Description Required <code>PROFILE_NAME</code> The name of the profile to modify. Yes <code>KEY</code> The configuration key to set (e.g., 'lm.model'). Yes <code>VALUE</code> The value to set for the key. Yes"},{"location":"cli-reference/#options_4","title":"Options","text":"Name Description Required Default <code>--help</code> Show this message and exit. No -"},{"location":"cli-reference/#dspy-profiles-init","title":"<code>dspy-profiles init</code>","text":"<p>Initializes a new profile interactively.</p>"},{"location":"cli-reference/#usage_5","title":"Usage","text":"<p><code>dspy-profiles init [OPTIONS]</code></p>"},{"location":"cli-reference/#arguments_5","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"cli-reference/#options_5","title":"Options","text":"Name Description Required Default <code>-p, --profile TEXT</code> The name for the new profile.  [default: (default)] No - <code>-f, --force</code> Overwrite the profile if it already exists. No - <code>--help</code> Show this message and exit. No -"},{"location":"cli-reference/#dspy-profiles-import","title":"<code>dspy-profiles import</code>","text":"<p>Imports a profile from a .env file.</p>"},{"location":"cli-reference/#usage_6","title":"Usage","text":"<p><code>dspy-profiles import [OPTIONS]</code></p>"},{"location":"cli-reference/#arguments_6","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"cli-reference/#options_6","title":"Options","text":"Name Description Required Default <code>-p, --profile TEXT</code> The name for the new profile. Yes - <code>--from FILE</code> The path to the .env file to import from.  [default: .env] No - <code>--help</code> Show this message and exit. No -"},{"location":"cli-reference/#dspy-profiles-diff","title":"<code>dspy-profiles diff</code>","text":"<p>Compares two profiles and highlights their differences.</p>"},{"location":"cli-reference/#usage_7","title":"Usage","text":"<p><code>dspy-profiles diff [OPTIONS] PROFILE_A_NAME PROFILE_B_NAME</code></p>"},{"location":"cli-reference/#arguments_7","title":"Arguments","text":"Name Description Required <code>PROFILE_A_NAME</code> The first profile to compare. Yes <code>PROFILE_B_NAME</code> The second profile to compare. Yes"},{"location":"cli-reference/#options_7","title":"Options","text":"Name Description Required Default <code>--help</code> Show this message and exit. No -"},{"location":"cli-reference/#dspy-profiles-validate","title":"<code>dspy-profiles validate</code>","text":"<p>Validates the structure and content of the profiles.toml file.</p>"},{"location":"cli-reference/#usage_8","title":"Usage","text":"<p><code>dspy-profiles validate [OPTIONS]</code></p>"},{"location":"cli-reference/#arguments_8","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"cli-reference/#options_8","title":"Options","text":"Name Description Required Default <code>-c, --config FILE</code> Path to the profiles.toml file.  [default: /home/runner/.dspy/profiles.toml] No - <code>--help</code> Show this message and exit. No -"},{"location":"cli-reference/#dspy-profiles-test","title":"<code>dspy-profiles test</code>","text":"<p>Tests connectivity to the language model for a given profile.</p>"},{"location":"cli-reference/#usage_9","title":"Usage","text":"<p><code>dspy-profiles test [OPTIONS] PROFILE_NAME</code></p>"},{"location":"cli-reference/#arguments_9","title":"Arguments","text":"Name Description Required <code>PROFILE_NAME</code> The name of the profile to test. Yes"},{"location":"cli-reference/#options_9","title":"Options","text":"Name Description Required Default <code>--help</code> Show this message and exit. No -"},{"location":"cli-reference/#dspy-profiles-run","title":"<code>dspy-profiles run</code>","text":"<p>Executes a command with the specified profile's environment variables.</p>"},{"location":"cli-reference/#usage_10","title":"Usage","text":"<p><code>dspy-profiles run [OPTIONS]</code></p>"},{"location":"cli-reference/#arguments_10","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"cli-reference/#options_10","title":"Options","text":"Name Description Required Default <code>-p, --profile TEXT</code> The profile to activate for the command. Yes - <code>--help</code> Show this message and exit. No -"},{"location":"cli-run-reference/","title":"CLI Run Reference","text":""},{"location":"cli-run-reference/#dspy-run","title":"dspy-run","text":"<p>Run a command with a dspy-profile activated.</p>"},{"location":"cli-run-reference/#usage","title":"Usage","text":"<p><code>dspy-run [OPTIONS][COMMAND]... COMMAND [ARGS]...</code></p>"},{"location":"cli-run-reference/#arguments","title":"Arguments","text":"Name Description Required <code>[COMMAND]...</code> The command to run. No"},{"location":"cli-run-reference/#options","title":"Options","text":"Name Description Required Default <code>-p, --profile TEXT</code> The profile to activate. Defaults to 'default'.  [default: default] No - <code>--help</code> Show this message and exit. No -"},{"location":"cli-run-reference/#commands","title":"Commands","text":"<p>No commands available</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to <code>dspy-profiles</code>! Please see the main repository's <code>CONTRIBUTING.md</code> for guidelines.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>This guide will walk you through the basics of setting up and using <code>dspy-profiles</code>.</p>"},{"location":"quickstart/#1-installation","title":"1. Installation","text":"<p>First, install the package from PyPI:</p> uvpipuvxuv tool <p>uv add dspy-profilesInstalleduv run dspy-profiles --versiondspy-profiles version: 0.1.6</p> <p>pip install dspy-profilesInstalled</p> <p>uvx run dspy-profiles --versiondspy-profiles version: 0.1.6</p> <p>uv tool install dspy-profilesInstalleddspy-profiles --versiondspy-profiles version: 0.1.6</p>"},{"location":"quickstart/#2-core-concepts","title":"2. Core Concepts","text":"<p>A profile is a named collection of settings for DSPy. It can define:</p> <ul> <li>A Language Model (<code>lm</code>)</li> <li>A Retrieval Model (<code>rm</code>)</li> <li>Global settings (e.g., <code>cache_dir</code>, <code>retries</code>)</li> </ul> <p>Profiles are stored in a <code>profiles.toml</code> file. <code>dspy-profiles</code> locates this file with a clear, <code>git</code>-like precedence:</p> <ol> <li>Project-Specific File: It searches for a <code>profiles.toml</code> in the current directory and its parent directories.</li> <li>Environment Variable: You can set the <code>DSPY_PROFILES_PATH</code> environment variable to point to a specific configuration file.</li> <li>Global File: If neither of the above is found, it falls back to the global default at <code>~/.dspy/profiles.toml</code>.</li> </ol> <p>By default, the <code>init</code> command will create or edit the global file.</p>"},{"location":"quickstart/#profile-inheritance","title":"Profile Inheritance","text":"<p>Profiles can inherit and extend other profiles using the <code>extends</code> key. This allows you to create a base configuration and then create specialized variations without repeating yourself.</p> <p>For example, you could have a <code>base</code> profile with common settings, and <code>dev</code> and <code>prod</code> profiles that extend it but use different language models.</p> <pre><code>graph TD\n    A[base] --&gt; B[dev];\n    A --&gt; C[prod];\n    subgraph profiles.toml\n        B --&gt; D{lm: gpt-4o-mini};\n        C --&gt; E{lm: gpt-4-turbo};\n    end\n</code></pre>"},{"location":"quickstart/#3-initialize-your-first-profile","title":"3. Initialize Your First Profile","text":"<p>The easiest way to get started is with the interactive <code>init</code> command. This will create a <code>default</code> profile for you.</p> uvxuv tool <p>uvx dspy-profiles init</p> <p>dspy-profiles init</p> <p>This command will ask for the language model, and optionally, your API key and an API base. It will then create the configuration file at <code>~/.dspy/profiles.toml</code>.</p> <p>WARNING</p> <p>If you provide an API key, it will be stored in plaintext in the configuration file. Please ensure that this file is kept secure and is not committed to version control.</p>"},{"location":"quickstart/#4-view-your-profile","title":"4. View Your Profile","text":"<p>You can view the contents of any profile with the <code>show</code> command:</p> uvxuv tool <p>uvx dspy-profiles show default</p> <p>dspy-profiles show default</p>"},{"location":"quickstart/#5-using-profiles-in-your-code","title":"5. Using Profiles in Your Code","text":"<p><code>dspy-profiles</code> provides multiple ways to activate a profile, catering to different use cases.</p> Context ManagerDecoratorCLI <code>dspy-run</code> Command <p>The <code>profile</code> context manager is the most common way to activate a profile for a specific block of code.</p> <pre><code>import dspy\nfrom dspy_profiles import profile\n\n# DSPy settings are configured automatically within this block\nwith profile(\"default\"):\n    predictor = dspy.Predict(\"question -&gt; answer\")\n    result = predictor(question=\"What is the color of the sky?\")\n    print(result.answer)\n</code></pre> <p>Any DSPy calls made inside the <code>with</code> block will use the settings from your <code>default</code> profile. Outside the block, the global DSPy settings are left untouched.</p> <p>The <code>@with_profile</code> decorator is useful for applying a profile to an entire function.</p> <pre><code>import dspy\nfrom dspy_profiles import with_profile\n\n@with_profile(\"default\")\ndef my_dspy_program(question):\n    predictor = dspy.Predict(\"question -&gt; answer\")\n    return predictor(question=question)\n\nresult = my_dspy_program(\"What is the capital of Spain?\")\nprint(result.answer)\n</code></pre> <p>The <code>dspy-run</code> command is the most powerful feature for your daily workflow. It lets you run any Python script with a specific profile, without needing to modify the script's code at all.</p> <p>Imagine you have a standard DSPy script, <code>my_script.py</code>:</p> <pre><code># my_script.py\nimport dspy\n\n# This script is clean. No dspy-profiles code is needed.\npredictor = dspy.Predict(\"question -&gt; answer\")\nresult = predictor(question=\"What is the capital of Spain?\")\nprint(f\"The capital of Spain is {result.answer}.\")\n</code></pre> <p>Instead of adding a <code>with profile(...)</code> block to your code, you can simply tell <code>dspy-run</code> to handle it for you.</p> uv tool (Recommended)uvx (Ad-hoc)uv run (In a project) <p>If you have installed <code>dspy-profiles</code> as a tool with <code>uv tool install dspy-profiles</code>, you can call it directly. This is the cleanest and most convenient method.</p> <p>dspy-run my_script.pyNo profile specified. Using default profile: 'default'The capital of Spain is Madrid.dspy-run --profile production my_script.pyThe capital of Spain is Madrid.</p> <p>If you haven't installed the tool, you can use <code>uvx</code> to run it directly from PyPI.</p> <p>uvx dspy-run --profile default my_script.py</p> <p>If <code>dspy-profiles</code> is a dependency in your project's <code>pyproject.toml</code>, you can use <code>uv run</code>.</p> <p>uv run dspy-run --profile default my_script.py</p>"},{"location":"quickstart/#6-next-steps","title":"6. Next Steps","text":"<p>You've now learned the basics of <code>dspy-profiles</code>. From here, you can:</p> <ul> <li>Explore the CLI Reference to see all available commands.</li> <li>Dive into the API Reference for advanced usage.</li> <li>Learn about creating more complex profiles with inheritance.</li> </ul>"}]}